{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formItemLayout","labelCol","xs","span","sm","wrapperCol","App","useState","spinning","setSpinning","name","onFinish","values","list","length","fetch","headers","body","JSON","stringify","method","then","res","console","log","message","error","autoComplete","style","marginTop","List","fields","add","remove","map","field","key","align","Item","label","fieldKey","rules","required","placeholder","offset","MinusCircleOutlined","onClick","type","block","icon","PlusOutlined","htmlType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"qSAIMA,EAAiB,CACrBC,SAAU,CACRC,GAAI,CAAEC,KAAM,GACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,GACZC,GAAI,CAAED,KAAM,MA6FDG,EAxFH,WAAO,IAAD,EAEgBC,oBAAS,GAFzB,mBAETC,EAFS,KAECC,EAFD,KAqBhB,OACE,kBAAC,IAAD,CAAMD,SAAUA,GACd,kBAAC,IAAD,CAAME,KAAK,yBAAyBC,SAnBvB,SAAAC,GACXA,EAAOC,MAAQD,EAAOC,KAAKC,OAAS,GAEtCL,GAAY,GAEZM,MAAM,YAAa,CACjBC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,GACrBQ,OAAQ,SACPC,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAE3BG,IAAQC,MAAM,gDAM0CC,aAAa,MAAMC,MAAO,CAAEC,UAAW,KAC7F,kBAAC,IAAKC,KAAN,CAAWpB,KAAK,SACb,SAACqB,EAAD,GAA8B,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACf,OACE,6BACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,kBAAC,IAAD,CAAKC,IAAKD,EAAMC,IAAKC,MAAM,OACzB,kBAAC,IAAD,CAAKlC,KAAM,IACT,kBAAC,IAAKmC,KAAN,iBACMH,EACAnC,EAFN,CAGEuC,MAAM,qBACN7B,KAAM,CAACyB,EAAMzB,KAAM,WACnB8B,SAAU,CAACL,EAAMK,SAAU,SAC3BC,MAAO,CAAC,CAAEC,UAAU,EAAMjB,QAAS,4CAEnC,kBAAC,IAAD,CAAOkB,YAAY,4CAGvB,kBAAC,IAAD,CAAKxC,KAAM,IACT,kBAAC,IAAKmC,KAAN,iBACMH,EACAnC,EAFN,CAGEuC,MAAM,2BACN7B,KAAM,CAACyB,EAAMzB,KAAM,OACnB8B,SAAU,CAACL,EAAMK,SAAU,QAC3BC,MAAO,CAAC,CAAEC,UAAU,EAAMjB,QAAS,oEAEnC,kBAAC,IAAD,CAAOkB,YAAY,oEAIvB,kBAAC,IAAD,CAAKxC,KAAM,EAAGyC,OAAQ,GACpB,kBAACC,EAAA,EAAD,CACEC,QAAS,WACPb,EAAOE,EAAMzB,cAMvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKP,KAAM,GAAIyC,OAAQ,GACrB,kBAAC,IAAD,CACEG,KAAK,SACLD,QAAS,WACPd,KAEFgB,OAAK,EACLC,KAAM,kBAACC,EAAA,EAAD,OANR,gBAUA,kBAAC,IAAD,CAAQH,KAAK,UAAUI,SAAS,SAASvB,MAAO,CAAEC,UAAW,KAA7D,0BChFAuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLH,QAAQG,MAAMA,EAAMD,c","file":"static/js/main.e856e1e1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Input, Button, Spin, Row, Col, message } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 4 },\n    sm: { span: 4 },\n  },\n  wrapperCol: {\n    xs: { span: 6 },\n    sm: { span: 20 },\n  },\n};\n\n\nconst App = () => {\n\n  const [spinning, setSpinning] = useState(false)\n\n  const onFinish = values => {\n    if (values.list && values.list.length > 0) {\n\n      setSpinning(true)\n\n      fetch('/download', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values),\n        method: 'post'\n      }).then(res => console.log(res))\n    } else {\n      message.error('起码得加一个吧!')\n    }\n  };\n\n  return (\n    <Spin spinning={spinning}>\n      <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\" style={{ marginTop: 16 }}>\n        <Form.List name=\"list\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                {fields.map(field => (\n                  <Row key={field.key} align='top'>\n                    <Col span={10}>\n                      <Form.Item\n                        {...field}\n                        {...formItemLayout}\n                        label='文件名'\n                        name={[field.name, 'dirName']}\n                        fieldKey={[field.fieldKey, 'first']}\n                        rules={[{ required: true, message: '请输入文件名!' }]}\n                      >\n                        <Input placeholder=\"请输入文件名!\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={10}>\n                      <Form.Item\n                        {...field}\n                        {...formItemLayout}\n                        label='接口地址'\n                        name={[field.name, 'url']}\n                        fieldKey={[field.fieldKey, 'last']}\n                        rules={[{ required: true, message: '请输入有效的接口地址!' }]}\n                      >\n                        <Input placeholder=\"请输入有效的接口地址!\" />\n                      </Form.Item>\n                    </Col>\n\n                    <Col span={2} offset={1}>\n                      <MinusCircleOutlined\n                        onClick={() => {\n                          remove(field.name);\n                        }}\n                      />\n                    </Col>\n                  </Row>\n                ))}\n                <Row>\n                  <Col span={20} offset={1}>\n                    <Button\n                      type=\"dashed\"\n                      onClick={() => {\n                        add();\n                      }}\n                      block\n                      icon={<PlusOutlined />}\n                    >\n                      添加\n                  </Button>\n                    <Button type=\"primary\" htmlType=\"submit\" style={{ marginTop: 16 }}>确定 </Button>\n                  </Col>\n                </Row>\n              </div>\n            )\n          }}\n        </Form.List>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}